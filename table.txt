enum class Category : uint32_t{
    Spaces,          Other,            Id_begin,
    Id_body,         Keyword_begin,    Delimiter_begin,
    Double_quote,    Letters_Xx,       Letters_Bb,
    Letters_Oo,      Single_quote,     Dollar,
    Hex_digit,       Oct_digit,        Bin_digit,
    Dec_digit,       Zero,             Letters_Ee,
    Plus_minus,      Precision_letter, Digits_1_to_9,
    Point
};

/*
 * It happens that in std::map<K,V> the key type is integer, and a lot of keys with the
 * same corresponding values. If such a map must be a generated constant, then this map
 * can be optimized. Namely, iterating through a map using range-based for, we will
 * build a std::vector<std::pair<K, V>>. Then we group pairs std::pair<K, V> in pairs
 * in the form (segment, a value of type V), where 'segment' is a struct consisting of
 * lower bound and upper bound. Next, we permute the grouped pair in the such way that
 * in order to search for in the array of the resulting values we can use the algorithm
 * from the answer to exercise 6.2.24 of the book
 * Knuth D.E. The art of computer programming. Volume 3. Sorting and search. ---
 * 2nd ed. --- Addison-Wesley, 1998.
*/

#define RandomAccessIterator typename
#define Callable             typename
#define Integral             typename
template<typename T>
struct Segment{
    T lower_bound;
    T upper_bound;

    Segment()               = default;
    Segment(const Segment&) = default;
    ~Segment()              = default;
};

template<typename T, typename V>
struct Segment_with_value{
    Segment<T> bounds;
    V          value;

    Segment_with_value()                          = default;
    Segment_with_value(const Segment_with_value&) = default;
    ~Segment_with_value()                         = default;
};

/* This function uses algorithm from the answer to the exercise 6.2.24 of the monography
 *  Knuth D.E. The art of computer programming. Volume 3. Sorting and search. --- 2nd ed.
 *  --- Addison-Wesley, 1998.
*/
template<RandomAccessIterator I, typename K>
std::pair<bool, size_t> knuth_find(I it_begin, I it_end, K key)
{
    std::pair<bool, size_t> result = {false, 0};
    size_t                  i      = 1;
    size_t                  n      = it_end - it_begin;
    while(i <= n){
        const auto& curr        = it_begin[i - 1];
        const auto& curr_bounds = curr.bounds;
        if(key < curr_bounds.lower_bound){
            i = 2 * i;
        }else if(key > curr_bounds.upper_bound){
            i = 2 * i + 1;
        }else{
            result.first = true; result.second = i - 1;
            break;
        }
    }
    return result;
}

static const Segment_with_value<char32_t, uint64_t> categories_table[] = {
    {{U'a', U'a'},  4108      },    {{U'2', U'7'},  1093640   },    {{U'б', U'е'},  28        },  
    {{U'(', U'*'},  32        },    {{U'G', U'N'},  12        },    {{U'p', U'p'},  12        },    
    {{U'х', U'х'},  12        },  {{U'#', U'#'},  32        },    {{U'.', U'.'},  2097184   },    
    {{U'B', U'B'},  4364      },    {{U'Y', U'Z'},  12        },    {{U'e', U'e'},  135180    },    
    {{U'y', U'z'},  12        },    {{U'к', U'т'},  28        },  {{U'ш', U'я'},  12        },  
    {{U'!', U'!'},  32        },    {{U'%', U'&'},  32        },    {{U',', U','},  32        },    
    {{U'0', U'0'},  126984    },    {{U':', U'@'},  32        },    {{U'E', U'E'},  135180    },    
    {{U'P', U'W'},  12        },    {{U']', U'^'},  32        },    {{U'c', U'c'},  4108      },    
    {{U'g', U'n'},  12        },    {{U'r', U'w'},  12        },    {{U'Ё', U'Ё'},  12        },  
    {{U'и', U'и'},  28        },  {{U'ф', U'ф'},  28        },  {{U'ц', U'ч'},  28        },  
    {{U'ё', U'ё'},  12        },  {{   1,   32},  1         },    {{U'"', U'"'},  64        },    
    {{U'$', U'$'},  2048      },    {{U''', U'''},  1024      },    {{U'+', U'+'},  262176    },    
    {{U'-', U'-'},  262176    },    {{U'/', U'/'},  32        },    {{U'1', U'1'},  1110024   },    
    {{U'8', U'9'},  1085448   },    {{U'A', U'A'},  4108      },    {{U'C', U'D'},  4108      },    
    {{U'F', U'F'},  4108      },    {{U'O', U'O'},  524       },    {{U'X', U'X'},  140       },    
    {{U'[', U'['},  32        },    {{U'_', U'_'},  12        },    {{U'b', U'b'},  4364      },    
    {{U'd', U'd'},  528396    },    {{U'f', U'f'},  528396    },    {{U'o', U'o'},  524       },    
    {{U'q', U'q'},  524300    },    {{U'x', U'x'},  524428    },    {{U'{', U'~'},  32        },    
    {{U'А', U'а'},  12        },  {{U'ж', U'з'},  12        },  {{U'й', U'й'},  12        },  
    {{U'у', U'у'},  12        }
};

static constexpr size_t num_of_elems_in_categories_table = 58;

uint64_t get_categories_set(char32_t c)
{
    auto t = knuth_find(categories_table,
                        categories_table + num_of_elems_in_categories_table,
                        c);
    return t.first ? categories_table[t.second].value : (1ULL << Other)
}

